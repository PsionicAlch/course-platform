// Code generated by "enumer -type=AuthorizationLevel -json"; DO NOT EDIT.

package database

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AuthorizationLevelName = "AllUserAdminAuthor"

var _AuthorizationLevelIndex = [...]uint8{0, 3, 7, 12, 18}

const _AuthorizationLevelLowerName = "alluseradminauthor"

func (i AuthorizationLevel) String() string {
	if i < 0 || i >= AuthorizationLevel(len(_AuthorizationLevelIndex)-1) {
		return fmt.Sprintf("AuthorizationLevel(%d)", i)
	}
	return _AuthorizationLevelName[_AuthorizationLevelIndex[i]:_AuthorizationLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AuthorizationLevelNoOp() {
	var x [1]struct{}
	_ = x[All-(0)]
	_ = x[User-(1)]
	_ = x[Admin-(2)]
	_ = x[Author-(3)]
}

var _AuthorizationLevelValues = []AuthorizationLevel{All, User, Admin, Author}

var _AuthorizationLevelNameToValueMap = map[string]AuthorizationLevel{
	_AuthorizationLevelName[0:3]:        All,
	_AuthorizationLevelLowerName[0:3]:   All,
	_AuthorizationLevelName[3:7]:        User,
	_AuthorizationLevelLowerName[3:7]:   User,
	_AuthorizationLevelName[7:12]:       Admin,
	_AuthorizationLevelLowerName[7:12]:  Admin,
	_AuthorizationLevelName[12:18]:      Author,
	_AuthorizationLevelLowerName[12:18]: Author,
}

var _AuthorizationLevelNames = []string{
	_AuthorizationLevelName[0:3],
	_AuthorizationLevelName[3:7],
	_AuthorizationLevelName[7:12],
	_AuthorizationLevelName[12:18],
}

// AuthorizationLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AuthorizationLevelString(s string) (AuthorizationLevel, error) {
	if val, ok := _AuthorizationLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AuthorizationLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AuthorizationLevel values", s)
}

// AuthorizationLevelValues returns all values of the enum
func AuthorizationLevelValues() []AuthorizationLevel {
	return _AuthorizationLevelValues
}

// AuthorizationLevelStrings returns a slice of all String values of the enum
func AuthorizationLevelStrings() []string {
	strs := make([]string, len(_AuthorizationLevelNames))
	copy(strs, _AuthorizationLevelNames)
	return strs
}

// IsAAuthorizationLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AuthorizationLevel) IsAAuthorizationLevel() bool {
	for _, v := range _AuthorizationLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AuthorizationLevel
func (i AuthorizationLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AuthorizationLevel
func (i *AuthorizationLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AuthorizationLevel should be a string, got %s", data)
	}

	var err error
	*i, err = AuthorizationLevelString(s)
	return err
}
